{"version":3,"sources":["utils.js","Map.jsx","App.js","serviceWorker.js","index.js"],"names":["displayAttrs","defaultStyle","weight","fillOpacity","color","clean","val","pretty","out","parseFloat","replace","toFixed","toLocaleString","VentMap","activeAttribute","useState","hiFeature","setHiFeature","currentBrew","setCurrentBrew","baseData","setBaseData","currentLayer","setCurrentLayer","useEffect","layer","createLayer","highlightFeature","e","target","setStyle","dashArray","bringToFront","feature","resetHighlight","handleOnEach","on","mouseover","mouseout","click","featureStyle","brew","attrName","Object","assign","fillColor","getColorInRange","properties","geojson","collection","ClassyBrew","dataSeries","features","map","setSeries","setNumClasses","setColorCode","classify","createClasses","GeoJSON","data","onEachFeature","style","useAsync","a","axios","get","resp","highlightDisplay","attrs","title","content","attr","idx","activeClass","key","className","size","width","createHoverDisplay","legend","breaks","getBreaks","labels","i","length","from","to","background","push","Fragment","createLegend","Map","center","zoom","TileLayer","url","attribution","position","Header","Layout","Content","Option","Select","attributeOptions","value","App","activeAttr","setActiveAttr","height","InfoCircleOutlined","onClick","Modal","info","href","onOk","padding","dropdownMatchSelectWidth","defaultValue","onChange","margin","minHeight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sbAAaA,EAAe,CACxB,4EACA,yCACA,oCACA,6CACA,0DACA,wCACA,qDACA,qDACA,iBACA,sBCIEC,EAAe,CACjBC,OAAQ,EACRC,YAAa,GACbC,MAAO,QAwELC,EAAQ,SAACC,GAAyB,IAApBC,EAAmB,wDAC/BC,EAAMF,EASV,MARmB,kBAARA,IACPE,EAAMC,WAAWH,EAAII,QAAQ,IAAK,MAEtCF,EAAMC,WAAWD,EAAIG,QAAQ,IAEzBJ,IACAC,EAAMA,EAAII,kBAEPJ,GAGI,SAASK,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,gBAAmB,EACfC,mBAAS,MADM,mBAC1CC,EAD0C,KAC/BC,EAD+B,OAEXF,mBAAS,MAFE,mBAE1CG,EAF0C,KAE7BC,EAF6B,OAGjBJ,mBAAS,MAHQ,mBAG1CK,EAH0C,KAGhCC,EAHgC,OAITN,mBAAS,MAJA,mBAI1CO,EAJ0C,KAI5BC,EAJ4B,KAOjDC,qBAAU,WACN,GAAKJ,EAAL,CACA,IAAMK,EAAQC,EAAYN,GAC1BG,EAAgBE,MACjB,CAACX,EAAiBM,IAmBrB,SAASO,EAAiBC,GACtB,IAAIH,EAAQG,EAAEC,OAEdJ,EAAMK,SAAS,CACX5B,OAAQ,EACRE,MAAO,OACP2B,UAAW,MAGfN,EAAMO,eACNf,EAAaQ,EAAMQ,SAGvB,SAASC,EAAeN,GACpBA,EAAEC,OAAOC,SAAS,CACd5B,OAAQ,EACRE,MAAO,OACP2B,UAAW,KAEfd,EAAa,MAGjB,SAASkB,EAAaF,EAASR,GAC3BA,EAAMW,GAAG,CACLC,UAAWV,EACXW,SAAUJ,EACVK,MAAOZ,IAIf,IAAMa,EAAe,SAACC,EAAMC,GACxB,OAAO,SAAAT,GAMH,OALcU,OAAOC,OAAO3C,EAAc,CACtC4C,UAAWJ,EAAKK,gBACZzC,EAAM4B,EAAQc,WAAWL,SAOnChB,EAAc,SAAAsB,GAChB,IAAMP,EAzDY,SAACC,EAAUO,GAC7B,IAAMR,EAAO,IAAIS,IACXC,EAAaF,EAAWG,SAASC,KACnC,SAAApB,GAAO,OAAI5B,EAAM4B,EAAQc,WAAWL,KAAc,KAQtD,OALAD,EAAKa,UAAUH,GACfV,EAAKc,cAAc,GACnBd,EAAKe,aAAa,QAClBf,EAAKgB,SA1GgB,YA2GrBtC,EAAesB,GACRA,EA8CMiB,CAAc5C,EAAiBkC,GAC5C,OACI,kBAACW,EAAA,EAAD,CACIC,KAAMZ,EACNa,cAAe1B,EACf2B,MAAOtB,EAAaC,EAAM3B,MAKtCiD,YAAQ,sBAAC,4BAAAC,EAAA,sEACcC,IAAMC,IA7KT,wCA4KX,OACCC,EADD,OAEL9C,EAAY8C,EAAKP,MACjBrC,EAAgBG,EAAYyC,EAAKP,OAH5B,4CAMT,IACMQ,EAxKiB,SAACnC,EAASnB,GACjC,IAAMuD,EAAK,OAAGpC,QAAH,IAAGA,OAAH,EAAGA,EAASc,WACjBuB,EAAQrC,EAAUoC,EAAM,cAAgB,eACxCE,EAAUtC,EACVjC,EAAaqD,KAAI,SAACmB,EAAMC,GACpB,IAAMC,EAAcF,IAAS1D,EAAkB,cAAgB,GAC/D,OACI,yBACI6D,IAAG,eAAUF,GACbG,UAAS,UAAKF,EAAL,kBAET,2BACI,gCAASF,IAEb,2BAAInE,EAAMgE,EAAMG,IAAO,QAInC,GAEN,OACI,kBAAC,IAAD,CACII,UAAU,cACVC,KAAK,QACLP,MAAOA,EACPR,MAAO,CAAEgB,MAAO,MAEfP,GA6IgBQ,CAAmB/D,EAAWF,GACjDkE,EAvIW,SAAAvC,GACjB,GAAKA,EAAL,CAKA,IAHA,IAAMwC,EAASxC,EAAKyC,YACdC,EAAS,GAENC,EAAI,EAAGA,EAAIH,EAAOI,OAAQD,IAAK,CACpC,IAAME,EAAOL,EAAOG,GACdG,EAAKN,EAAOG,EAAI,GAChBtB,EAAQ,CACV0B,WAAY/C,EAAKK,gBAAgBwC,EAAO,IAExCC,GACAJ,EAAOM,KACH,kBAAC,IAAMC,SAAP,CAAgBf,IAAG,cAASS,IACxB,uBAAGtB,MAAOA,IADd,UAEQwB,EAFR,cAEkBC,GACd,+BAMhB,OACI,kBAAC,IAAD,CAAMX,UAAU,SAASC,KAAK,SACzBM,IA8GMQ,CAAazE,GAa5B,OAVI,kBAAC0E,EAAA,EAAD,CAAKC,OALQ,CAAC,IAAK,IAKIC,KAAM,GACzB,kBAACC,EAAA,EAAD,CACIC,IAAI,+GACJC,YAAY,iDAEf3E,EACD,kBAAC,IAAD,CAAS4E,SAAS,YAAY9B,GAC9B,kBAAC,IAAD,CAAS8B,SAAS,cAAclB,I,IChMpCmB,EAAoBC,IAApBD,OAAQE,EAAYD,IAAZC,QACRC,EAAWC,IAAXD,OAEFE,EAAmBxG,EAAaqD,KAAI,SAAAmB,GAAI,OAC1C,kBAAC8B,EAAD,CAAQ3B,IAAKH,EAAMiC,MAAOjC,GACrBA,MAqFMkC,MAjFf,WAAgB,IAAD,EACyB3F,mBAASf,EAAa,IAD/C,mBACJ2G,EADI,KACQC,EADR,KA6CX,OACI,yBAAKhC,UAAU,OACX,kBAAC,IAAD,CAAQd,MAAO,CAAE+C,OAAQ,UACrB,kBAACV,EAAD,CAAQvB,UAAU,UACd,wBAAId,MAAO,CAAE1D,MAAO,UAApB,+DAGI,kBAAC0G,EAAA,EAAD,CAAoBC,QA7C3B,WACTC,IAAMC,KAAK,CACP3C,MAAO,QACPC,QACI,6BACI,mDAEI,6BAAO,IACP,uBAAG2C,KAAK,gDAAR,gDAGA,6BANJ,sBAQI,6BAAO,IACP,uBAAGA,KAAK,wEAAR,wEAGA,6BAZJ,oBAcI,6BAAO,IACP,uBAAGA,KAAK,yFAAR,yFAGA,8BAEJ,6BACA,6EACmD,6BAC/C,uBAAGA,KAAK,2DAAR,6DAMZC,KAjCO,oBA+CH,kBAAC,IAAD,CAAQrD,MAAO,CAAEsD,QAAS,cACtB,wDACA,kBAAC,IAAD,CACIC,0BAA0B,EAC1BxC,KAAK,QACLyC,aAActH,EAAa,GAC3BuH,SA1DC,SAAAd,GACjBG,EAAcH,KA2DGD,GAEL,kBAACH,EAAD,CACIzB,UAAU,yBACVd,MAAO,CACHsD,QAAS,EACTI,OAAQ,EACRC,UAAW,MAGf,kBAAC,EAAD,CAAK3G,gBAAiB6F,SChF1Be,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3a246ada.chunk.js","sourcesContent":["export const displayAttrs = [\n    'Estimated No. Full-Featured Mechanical Ventilators per 100,000 Population',\n    'Total Hospital Beds per 100,000 people',\n    'Total ICU Beds per 100,000 people',\n    'Available Hospital Beds per 100,000 people',\n    'Potentially Available Hospital Beds* per 100,000 people',\n    'Available ICU Beds per 100,000 people',\n    'Potentially Available ICU Beds* per 100,000 people',\n    'Estimated No. Full-Featured Mechanical Ventilators',\n    'Total ICU Beds',\n    'Available ICU Beds',\n];\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useAsync } from 'react-use';\n\nimport ClassyBrew from 'classybrew';\n\nimport { GeoJSON, Map, TileLayer } from 'react-leaflet';\nimport { Card } from 'antd';\nimport Control from 'react-leaflet-control';\n\nimport { displayAttrs } from './utils';\n\nconst hghiVentDataUrl = './hghi_state_data_with_vents.geojson';\n\nconst defaultStyle = {\n    weight: 2,\n    fillOpacity: 0.9,\n    color: '#aaa',\n};\n\nconst classificationMethod = 'quantile'; // or jenks, equal_interval\n\n// Create an attribute display popup for hovering over a state\nconst createHoverDisplay = (feature, activeAttribute) => {\n    const attrs = feature?.properties;\n    const title = feature ? attrs['State Name'] : 'Select state';\n    const content = feature\n        ? displayAttrs.map((attr, idx) => {\n              const activeClass = attr === activeAttribute ? 'active-attr' : '';\n              return (\n                  <div\n                      key={`disp-${idx}`}\n                      className={`${activeClass} attr-display`}\n                  >\n                      <p>\n                          <strong>{attr}</strong>\n                      </p>\n                      <p>{clean(attrs[attr], true)}</p>\n                  </div>\n              );\n          })\n        : '';\n\n    return (\n        <Card\n            className=\"state-attrs\"\n            size=\"small\"\n            title={title}\n            style={{ width: 300 }}\n        >\n            {content}\n        </Card>\n    );\n};\n\n// Create a legend for the currently calculated color ramp and classification\n// scheme\nconst createLegend = brew => {\n    if (!brew) return;\n\n    const breaks = brew.getBreaks();\n    const labels = [];\n\n    for (let i = 0; i < breaks.length; i++) {\n        const from = breaks[i];\n        const to = breaks[i + 1];\n        const style = {\n            background: brew.getColorInRange(from + 1),\n        };\n        if (to) {\n            labels.push(\n                <React.Fragment key={`leg-${i}`}>\n                    <i style={style}></i>\n                    {`${from} - ${to}`}\n                    <br />\n                </React.Fragment>,\n            );\n        }\n    }\n\n    return (\n        <Card className=\"legend\" size=\"small\">\n            {labels}\n        </Card>\n    );\n};\n\n// The data values are numbers, but they might, be encoded as strings.\n// Additionally, they may have non-numeric characters to filter out.\nconst clean = (val, pretty = false) => {\n    let out = val;\n    if (typeof val === 'string') {\n        out = parseFloat(val.replace(',', ''));\n    }\n    out = parseFloat(out.toFixed(2));\n\n    if (pretty) {\n        out = out.toLocaleString();\n    }\n    return out;\n};\n\nexport default function VentMap({ activeAttribute }) {\n    const [hiFeature, setHiFeature] = useState(null);\n    const [currentBrew, setCurrentBrew] = useState(null);\n    const [baseData, setBaseData] = useState(null);\n    const [currentLayer, setCurrentLayer] = useState(null);\n\n    // When the selected attribute changes, rerender the layer\n    useEffect(() => {\n        if (!baseData) return;\n        const layer = createLayer(baseData);\n        setCurrentLayer(layer);\n    }, [activeAttribute, baseData]);\n\n    // Determine the color breaks based on the values of the current\n    // attribute for all states\n    const createClasses = (attrName, collection) => {\n        const brew = new ClassyBrew();\n        const dataSeries = collection.features.map(\n            feature => clean(feature.properties[attrName]) || 0,\n        );\n\n        brew.setSeries(dataSeries);\n        brew.setNumClasses(5);\n        brew.setColorCode('PuBu');\n        brew.classify(classificationMethod);\n        setCurrentBrew(brew);\n        return brew;\n    };\n\n    // Restyle the feature currently being hovered over\n    function highlightFeature(e) {\n        var layer = e.target;\n\n        layer.setStyle({\n            weight: 2,\n            color: '#666',\n            dashArray: '4',\n        });\n\n        layer.bringToFront();\n        setHiFeature(layer.feature);\n    }\n\n    function resetHighlight(e) {\n        e.target.setStyle({\n            weight: 2,\n            color: '#aaa',\n            dashArray: '',\n        });\n        setHiFeature(null);\n    }\n\n    function handleOnEach(feature, layer) {\n        layer.on({\n            mouseover: highlightFeature,\n            mouseout: resetHighlight,\n            click: highlightFeature,\n        });\n    }\n\n    const featureStyle = (brew, attrName) => {\n        return feature => {\n            const style = Object.assign(defaultStyle, {\n                fillColor: brew.getColorInRange(\n                    clean(feature.properties[attrName]),\n                ),\n            });\n            return style;\n        };\n    };\n\n    const createLayer = geojson => {\n        const brew = createClasses(activeAttribute, geojson);\n        return (\n            <GeoJSON\n                data={geojson}\n                onEachFeature={handleOnEach}\n                style={featureStyle(brew, activeAttribute)}\n            />\n        );\n    };\n\n    useAsync(async () => {\n        const resp = await axios.get(hghiVentDataUrl);\n        setBaseData(resp.data);\n        setCurrentLayer(createLayer(resp.data));\n    });\n\n    const position = [42, -92];\n    const highlightDisplay = createHoverDisplay(hiFeature, activeAttribute);\n    const legend = createLegend(currentBrew);\n\n    const map = (\n        <Map center={position} zoom={4}>\n            <TileLayer\n                url=\"https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}\"\n                attribution=\"Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ\"\n            />\n            {currentLayer}\n            <Control position=\"topright\">{highlightDisplay}</Control>\n            <Control position=\"bottomleft\">{legend}</Control>\n        </Map>\n    );\n    return map;\n}\n","import React, { useState } from 'react';\nimport { Layout, Select, Modal } from 'antd';\nimport { InfoCircleOutlined } from '@ant-design/icons';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport 'leaflet/dist/leaflet.css';\n\nimport Map from './Map';\nimport { displayAttrs } from './utils';\n\nconst { Header, Content } = Layout;\nconst { Option } = Select;\n\nconst attributeOptions = displayAttrs.map(attr => (\n    <Option key={attr} value={attr}>\n        {attr}\n    </Option>\n));\n\nfunction App() {\n    const [activeAttr, setActiveAttr] = useState(displayAttrs[0]);\n\n    const handleChange = value => {\n        setActiveAttr(value);\n    };\n\n    const info = () => {\n        Modal.info({\n            title: 'About',\n            content: (\n                <div>\n                    <p>\n                        Ventilator data from:\n                        <br />{' '}\n                        <a href=\"https://www.ncbi.nlm.nih.gov/pubmed/21149215\">\n                            https://www.ncbi.nlm.nih.gov/pubmed/21149215\n                        </a>\n                        <br />\n                        Capacity data from:\n                        <br />{' '}\n                        <a href=\"https://globalepidemics.org/2020/03/17/caring-for-covid-19-patients/\">\n                            https://globalepidemics.org/2020/03/17/caring-for-covid-19-patients/\n                        </a>\n                        <br />\n                        Census data from:\n                        <br />{' '}\n                        <a href=\"https://www.census.gov/data/tables/time-series/demo/popest/2010s-counties-detail.html\">\n                            https://www.census.gov/data/tables/time-series/demo/popest/2010s-counties-detail.html\n                        </a>\n                        <br />\n                    </p>\n                    <hr />\n                    <p>\n                        Source code and methodology can be found here: <br />\n                        <a href=\"https://github.com/daveluo/covid19-healthsystemcapacity\">\n                            https://github.com/daveluo/covid19-healthsystemcapacity\n                        </a>\n                    </p>\n                </div>\n            ),\n            onOk() {},\n        });\n    };\n\n    return (\n        <div className=\"App\">\n            <Layout style={{ height: '100vh' }}>\n                <Header className=\"header\">\n                    <h2 style={{ color: 'white' }}>\n                        Ventilator Supply and Healthcare Capacity Map, by State\n                        &nbsp;\n                        <InfoCircleOutlined onClick={info} />\n                    </h2>\n                </Header>\n                <Layout style={{ padding: '0 2px 2px' }}>\n                    <strong>Select an attribute:</strong>\n                    <Select\n                        dropdownMatchSelectWidth={false}\n                        size=\"large\"\n                        defaultValue={displayAttrs[0]}\n                        onChange={handleChange}\n                    >\n                        {attributeOptions}\n                    </Select>\n                    <Content\n                        className=\"site-layout-background\"\n                        style={{\n                            padding: 2,\n                            margin: 0,\n                            minHeight: 280,\n                        }}\n                    >\n                        <Map activeAttribute={activeAttr} />\n                    </Content>\n                </Layout>\n            </Layout>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}